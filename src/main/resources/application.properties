
#mybatis
mybatis.type-aliases-package=com.li.model
# 可以看到配置四个数据源 分别是 主数据库两个 从数据库两个
sharding.jdbc.datasource.names=master0,master1,master0slave0,master1slave0

# 主数据源
sharding.jdbc.datasource.master0.type=com.alibaba.druid.pool.DruidDataSource
sharding.jdbc.datasource.master0.driver-class-name=com.mysql.jdbc.Driver
sharding.jdbc.datasource.master0.url=jdbc:mysql://ip:3306/test_0?characterEncoding=utf-8
# 主数据库用户名 密码
sharding.jdbc.datasource.master0.username=user
sharding.jdbc.datasource.master0.password=password


# 从数据源
sharding.jdbc.datasource.master0slave0.type=com.alibaba.druid.pool.DruidDataSource
sharding.jdbc.datasource.master0slave0.driver-class-name=com.mysql.jdbc.Driver
sharding.jdbc.datasource.master0slave0.url=jdbc:mysql://ip:3306/test_0?characterEncoding=utf-8
# 从数据库用户名 密码
sharding.jdbc.datasource.master0slave0.username=user
sharding.jdbc.datasource.master0slave0.password=password


# 主数据源
sharding.jdbc.datasource.master1.type=com.alibaba.druid.pool.DruidDataSource
sharding.jdbc.datasource.master1.driver-class-name=com.mysql.jdbc.Driver
sharding.jdbc.datasource.master1.url=jdbc:mysql://ip:3306/test_1?characterEncoding=utf-8
# 主数据库用户名 密码
sharding.jdbc.datasource.master1.username=user
sharding.jdbc.datasource.master1.password=password

# 从数据源
sharding.jdbc.datasource.master1slave0.type=com.alibaba.druid.pool.DruidDataSource
sharding.jdbc.datasource.master1slave0.driver-class-name=com.mysql.jdbc.Driver
sharding.jdbc.datasource.master1slave0.url=jdbc:mysql://ip:3306/test_1?characterEncoding=utf-8
# 从数据库用户名 密码
sharding.jdbc.datasource.master1slave0.username=user
sharding.jdbc.datasource.master1slave0.password=password


# 读写分离配置
# 轮询操作
sharding.jdbc.config.masterslave.load-balance-algorithm-type=round_robin
sharding.jdbc.config.masterslave.name=dataSource

# 分库 用的id
sharding.jdbc.config.sharding.default-database-strategy.inline.sharding-column=id
sharding.jdbc.config.sharding.default-database-strategy.inline.algorithm-expression=master$->{id % 2}
# 分表
# 真实数据节点，由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持inline表达式
sharding.jdbc.config.sharding.tables.user.actual-data-nodes=master$->{0..1}.user_$->{0..1}
# 分片字段配置 用的age
sharding.jdbc.config.sharding.tables.user.table-strategy.inline.sharding-column=age
# 分片算法表达式
sharding.jdbc.config.sharding.tables.user.table-strategy.inline.algorithm-expression=user_$->{age % 2}
# 主键 UUID 18位数 如果是分布式还要进行一个设置 防止主键重复
sharding.jdbc.config.sharding.tables.user.key-generator-column-name=id
# 主数据库0
sharding.jdbc.config.sharding.master-slave-rules.master0.master-data-source-name=master0
# 从数据库0
sharding.jdbc.config.sharding.master-slave-rules.master0.slave-data-source-names=master0slave0
# 主数据库1
sharding.jdbc.config.sharding.master-slave-rules.master1.master-data-source-name=master1
# 从数据库1
sharding.jdbc.config.sharding.master-slave-rules.master1.slave-data-source-names=master1slave0
# 打印操作的sql以及库表数据等
sharding.jdbc.config.sharding.props.sql.show=true
spring.main.allow-bean-definition-overriding=true